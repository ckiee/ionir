#include <ionir/const/token_const.h>

namespace ionir {
    std::map<TokenKind, std::string> TokenConst::names = {
        {TokenKind::Dummy, "Dummy"},
        {TokenKind::Unknown, "Unknown"},
        {TokenKind::Identifier, "Identifier"},
        {TokenKind::LiteralString, "LiteralString"},
        {TokenKind::LiteralDecimal, "LiteralDecimal"},
        {TokenKind::LiteralInt, "LiteralInt"},
        {TokenKind::LiteralCharacter, "LiteralCharacter"},
        {TokenKind::Whitespace, "Whitespace"},
        {TokenKind::SymbolAt, "SymbolAt"},
        {TokenKind::SymbolColon, "SymbolColon"},
        {TokenKind::SymbolDollar, "SymbolDollar"},
        {TokenKind::SymbolHash, "SymbolHash"},
        {TokenKind::SymbolParenthesesL, "SymbolParenthesesL"},
        {TokenKind::SymbolParenthesesR, "SymbolParenthesesR"},
        {TokenKind::SymbolBracketL, "SymbolBracketL"},
        {TokenKind::SymbolBracketR, "SymbolBracketR"},
        {TokenKind::SymbolComma, "SymbolComma"},
        {TokenKind::SymbolTilde, "SymbolTilde"},
        {TokenKind::SymbolEqual, "SymbolEqual"},
        {TokenKind::SymbolSemiColon, "SymbolSemiColon"},
        {TokenKind::SymbolStar, "SymbolStar"},
        {TokenKind::SymbolBraceL, "SymbolBraceL"},
        {TokenKind::SymbolBraceR, "SymbolBraceR"},
        {TokenKind::SymbolArrow, "SymbolArrow"},
        {TokenKind::InstCall, "InstCall"},
        {TokenKind::InstStore, "InstStore"},
        {TokenKind::InstReturn, "InstReturn"},
        {TokenKind::InstAlloca, "InstAlloca"},
        {TokenKind::InstBranch, "InstBranch"},
        {TokenKind::KeywordFunction, "KeywordFunction"},
        {TokenKind::KeywordExtern, "KeywordExtern"},
        {TokenKind::KeywordElse, "KeywordElse"},
        {TokenKind::KeywordGlobal, "KeywordGlobal"},
        {TokenKind::KeywordMutable, "KeywordMutable"},
        {TokenKind::KeywordModule, "KeywordModule"},
        {TokenKind::TypeVoid, "TypeVoid"},
        {TokenKind::TypeString, "TypeString"},
        {TokenKind::TypeInt16, "TypeInt16"},
        {TokenKind::TypeInt32, "TypeInt32"},
        {TokenKind::TypeInt64, "TypeInt64"},
        {TokenKind::OperatorAdd, "OperatorAdd"},
        {TokenKind::OperatorSub, "OperatorSub"},
        {TokenKind::OperatorMultiply, "OperatorMultiply"},
        {TokenKind::OperatorDivide, "OperatorDivide"},
        {TokenKind::OperatorModulo, "OperatorModulo"},
        {TokenKind::OperatorExponent, "OperatorExponent"},
        {TokenKind::OperatorGreaterThan, "OperatorGreaterThan"},
        {TokenKind::OperatorLessThan, "OperatorLessThan"}
    };
}
